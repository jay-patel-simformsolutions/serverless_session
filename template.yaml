AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A sample SAM template for deploying Lambda functions.

Globals:
  Function:
    Timeout: 150
    MemorySize: 1024
    Tracing: Active
    AutoPublishAlias: live
    Runtime: python3.9

  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./src/layers/
      CompatibleRuntimes:
          - python3.9

  ProductsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: Products
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
  
  OrdersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH

  PaymentsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: Payments
      AttributeDefinitions:
        - AttributeName: paymentId
          AttributeType: S
      KeySchema:
        - AttributeName: paymentId
          KeyType: HASH

  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
  
  ProductServiceLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/product
      Handler: app.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        ProductAPI:
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /product/{proxy+}
            Method: any
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ProductsTable
  
  PaymentsServiceLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/payments
      Handler: app.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        PaymentsAPI:
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /payment/{proxy+}
            Method: any
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref PaymentsTable
          EVENT_BUS_NAME: !Ref PaymentsEventBus
          EVENT_BUS_ENDPOINT: !Ref PaymentsTable
  
  NotificationServiceLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/notification
      Handler: app.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        NotificationQueue:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt: 
                    - "NotificationQueue"
                    - "Arn"
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ProductsTable

  OrderServiceLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/order
      Handler: app.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        OrderAPI:
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /order/{proxy+}
            Method: any
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
          NOTIFICATION_QUEUE_URL: !Ref NotificationQueue

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowAllOperationsOnNotificationQueue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:*
                Resource: 
                  Fn::GetAtt: 
                    - "NotificationQueue"
                    - "Arn"
        - PolicyName: AllowCloudWatchAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: AllowEventBridgeAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - events:*
                Resource: "*"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'

  NotificationDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub "${AWS::StackName}-notification-dead-letter-queue"

  OrderDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub "${AWS::StackName}-orders-dead-letter-queue"

  NotificationQueue:
    Type: "AWS::SQS::Queue"
    DependsOn:
      - NotificationDeadLetterQueue
    Properties:
      QueueName: !Sub "${AWS::StackName}-notification-queue"
      VisibilityTimeout: 150
      RedrivePolicy: 
        deadLetterTargetArn: 
          Fn::GetAtt: 
            - "NotificationDeadLetterQueue"
            - "Arn"
        maxReceiveCount: 2

  PaymentsEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${AWS::StackName}-payments-bus"

  AllPaymentsEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Sub "${AWS::StackName}-payments-bus"
      EventPattern:
        detail-type:
          - prefix: payment-
      Name: !Sub "${AWS::StackName}-all-payments-events"
      State: ENABLED
      RoleArn:
        Fn::GetAtt: 
            - "LambdaExecutionRole"
            - "Arn"
      Targets:
        - Id: !Sub "${AWS::StackName}-all-payments-notification-target"
          Arn: 
            Fn::GetAtt: 
              - "NotificationServiceLambda"
              - "Arn"
          DeadLetterConfig:
            Arn: 
              Fn::GetAtt: 
              - "NotificationDeadLetterQueue"
              - "Arn"

        - Id: !Sub "${AWS::StackName}-all-payments-order-target"
          Arn: 
            Fn::GetAtt: 
              - "OrderServiceLambda"
              - "Arn"
          DeadLetterConfig:
            Arn: 
              Fn::GetAtt: 
              - "OrderDeadLetterQueue"
              - "Arn"

Outputs:
  APIGateway:
    Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/api"